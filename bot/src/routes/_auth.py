import logging
from contextlib import suppress

from pyrogram import errors as tg_errors
from pyrogram import types as tg_types
from pydantic import BaseModel
from fastapi.responses import JSONResponse

from ..setup.pyro_client import bot
from ..setup.web import bot_backend, status_codes
from ..setup.sqlite_orm import User, UserRole, db_session


logger = logging.getLogger(__name__)


class AuthData(BaseModel):
    id: int
    msg_id: int
    role: UserRole


@bot_backend.post('/auth/')
async def auth_route(data: AuthData) -> JSONResponse:
    with db_session:
        user: User | None = User.get(id=data.id)
        if not user:
            logger.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: %s', data.id)
            bot_msg_text = 'üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'
            resp = JSONResponse(
                {'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω'}, 
                status_codes.HTTP_400_BAD_REQUEST
            )
        elif user.role:
            logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: %s', data.id)
            bot_msg_text = 'üîì –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.'
            resp = JSONResponse(
                {'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
            )
        else:
            user.role = data.role
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            bot_msg_text = 'üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
            resp = JSONResponse({'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ'})
    with suppress(tg_errors.MessageIdInvalid):
        await bot.delete_messages(data.id, data.msg_id)
    await bot.send_message(data.id, bot_msg_text)
    return resp
