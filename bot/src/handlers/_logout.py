import logging

from pyrogram import types, filters, errors

from .. import filters as my_filters
from ..setup.web import WEB_URL, status_codes, http_client
from ..setup.sqlite_orm import fsm, db_session, User
from ..setup.pyro_client import bot


logger = logging.getLogger(__name__)


@bot.on_message(
        filters.private 
        & filters.command('logout') 
        & my_filters.authorized
)
async def support_msg_handler(_, msg: types.Message) -> None:
    await msg.reply(
        '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞? –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º,'
        ' –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.',
        reply_markup=types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton('‚úîÔ∏è –î–∞, –≤—ã–π—Ç–∏', 'approve'),
            types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
        ]])
    )

    fsm[msg] = 'approve'


@bot.on_callback_query(
        my_filters.authorized
        & fsm.at('approve')
)
async def handle_cancel(_, query: types.CallbackQuery) -> None:
    await query.answer()
    user: User | None = None
    if query.data == 'cancel':
        bot_msg_text = '‚ùé –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.'
    else:
        with db_session:
            user = User.get(id=query.from_user.id)
            if user:
                res = await http_client.post(
                    f'{WEB_URL}/api/tg-logout', 
                    json={'tgId': user.id}
                )
                if res.status_code == status_codes.HTTP_200_OK:
                    user.role = ''
                    bot_msg_text = '‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.'
        if not user:
            bot_msg_text = (
                '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. üò≠'
                ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤'
                ' –ø–æ–¥–¥–µ—Ä–∂–∫—É (/support).'
            )
    try:
        await query.message.edit(bot_msg_text)
    except (
        errors.MessageEditTimeExpired, 
        errors.ChatIdInvalid, 
        errors.MessageIdInvalid,
        errors.MessageNotModified,
    ) as e:
        if e != errors.ChatIdInvalid:
            await query.message.reply(bot_msg_text)
    del fsm[query]
